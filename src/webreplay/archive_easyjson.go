// Copyright (c) Microsoft Corporation.
// Licensed under the BSD-3-Clause license.

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package webreplay

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF9fe5e58DecodeGithubComMicrosoftWebReplaySrcWebreplay(in *jlexer.Lexer, out *Archive) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Requests":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Requests = make(map[string]map[string][]*ArchivedRequest)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 map[string][]*ArchivedRequest
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v1 = make(map[string][]*ArchivedRequest)
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v2 []*ArchivedRequest
							if in.IsNull() {
								in.Skip()
								v2 = nil
							} else {
								in.Delim('[')
								if v2 == nil {
									if !in.IsDelim(']') {
										v2 = make([]*ArchivedRequest, 0, 8)
									} else {
										v2 = []*ArchivedRequest{}
									}
								} else {
									v2 = (v2)[:0]
								}
								for !in.IsDelim(']') {
									var v3 *ArchivedRequest
									if in.IsNull() {
										in.Skip()
										v3 = nil
									} else {
										if v3 == nil {
											v3 = new(ArchivedRequest)
										}
										easyjsonF9fe5e58DecodeGithubComMicrosoftWebReplaySrcWebreplay1(in, v3)
									}
									v2 = append(v2, v3)
									in.WantComma()
								}
								in.Delim(']')
							}
							(v1)[key] = v2
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.Requests)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Certs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Certs = make(map[string][]uint8)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 []uint8
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						v4 = in.Bytes()
					}
					(out.Certs)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "IdleTimeouts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.IdleTimeouts = make(map[string]time.Duration)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 time.Duration
					v6 = time.Duration(in.Int64())
					(out.IdleTimeouts)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "NegotiatedProtocol":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.NegotiatedProtocol = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.NegotiatedProtocol)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "DeterministicTimeSeedMs":
			out.DeterministicTimeSeedMs = int64(in.Int64())
		case "ServeResponseInChronologicalSequence":
			out.ServeResponseInChronologicalSequence = bool(in.Bool())
		case "CurrentSessionId":
			out.CurrentSessionId = uint32(in.Uint32())
		case "DisableFuzzyURLMatching":
			out.DisableFuzzyURLMatching = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF9fe5e58EncodeGithubComMicrosoftWebReplaySrcWebreplay(out *jwriter.Writer, in Archive) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Requests\":"
		out.RawString(prefix[1:])
		if in.Requests == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Requests {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if v8Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v9First := true
					for v9Name, v9Value := range v8Value {
						if v9First {
							v9First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v9Name))
						out.RawByte(':')
						if v9Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
							out.RawString("null")
						} else {
							out.RawByte('[')
							for v10, v11 := range v9Value {
								if v10 > 0 {
									out.RawByte(',')
								}
								if v11 == nil {
									out.RawString("null")
								} else {
									easyjsonF9fe5e58EncodeGithubComMicrosoftWebReplaySrcWebreplay1(out, *v11)
								}
							}
							out.RawByte(']')
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Certs\":"
		out.RawString(prefix)
		if in.Certs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Certs {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				out.Base64Bytes(v12Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"IdleTimeouts\":"
		out.RawString(prefix)
		if in.IdleTimeouts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.IdleTimeouts {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				out.Int64(int64(v15Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"NegotiatedProtocol\":"
		out.RawString(prefix)
		if in.NegotiatedProtocol == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.NegotiatedProtocol {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				out.String(string(v16Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"DeterministicTimeSeedMs\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeterministicTimeSeedMs))
	}
	{
		const prefix string = ",\"ServeResponseInChronologicalSequence\":"
		out.RawString(prefix)
		out.Bool(bool(in.ServeResponseInChronologicalSequence))
	}
	{
		const prefix string = ",\"CurrentSessionId\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.CurrentSessionId))
	}
	{
		const prefix string = ",\"DisableFuzzyURLMatching\":"
		out.RawString(prefix)
		out.Bool(bool(in.DisableFuzzyURLMatching))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Archive) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF9fe5e58EncodeGithubComMicrosoftWebReplaySrcWebreplay(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Archive) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF9fe5e58EncodeGithubComMicrosoftWebReplaySrcWebreplay(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Archive) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF9fe5e58DecodeGithubComMicrosoftWebReplaySrcWebreplay(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Archive) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF9fe5e58DecodeGithubComMicrosoftWebReplaySrcWebreplay(l, v)
}
func easyjsonF9fe5e58DecodeGithubComMicrosoftWebReplaySrcWebreplay1(in *jlexer.Lexer, out *ArchivedRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SerializedRequest":
			if in.IsNull() {
				in.Skip()
				out.SerializedRequest = nil
			} else {
				out.SerializedRequest = in.Bytes()
			}
		case "SerializedResponse":
			if in.IsNull() {
				in.Skip()
				out.SerializedResponse = nil
			} else {
				out.SerializedResponse = in.Bytes()
			}
		case "LastServedSessionId":
			out.LastServedSessionId = uint32(in.Uint32())
		case "Duration":
			out.Duration = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF9fe5e58EncodeGithubComMicrosoftWebReplaySrcWebreplay1(out *jwriter.Writer, in ArchivedRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SerializedRequest\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.SerializedRequest)
	}
	{
		const prefix string = ",\"SerializedResponse\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SerializedResponse)
	}
	{
		const prefix string = ",\"LastServedSessionId\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.LastServedSessionId))
	}
	{
		const prefix string = ",\"Duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.Duration))
	}
	out.RawByte('}')
}
